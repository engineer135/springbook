<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		">

	<!-- @Bean 은 <bean 
		메소드명은 id
		class 는 빈 오브젝트를 어떤 클래스를 이용해서 만들지를 결정!	
	-->
	<!-- <bean id="connectionMaker" class="springbook.user.dao.DConnectionMaker"/> -->
	
	<!-- dataSource로 변경 -->
	<!-- propery를 이용해 수정자 메소드에 값 주입, 이때, ref가 아닌 value로 넣는다. 다른 빈의 이름이 아닌 실제 파수정자 메소드의 파라미터로 전달되는 스트링 그 자체이기 때문 -->
	<!-- 여기서 놀라운건 스프링이 프로퍼티의 값을 적절한 형태로 변환해준다는 것. 그래서 드라이버 클래스도 저렇게 넣어주면 알아서 형변환 시켜준다. -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="org.mariadb.jdbc.Driver"/>
		<property name="url" value="jdbc:mariadb://localhost/springbook"/>
		
		<!-- <property name="driverClass" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:XE"/> -->
		
		<property name="username" value="spring"/>
		<property name="password" value="book"/>
	</bean>
	
	<!-- 
		위와 동일한데, userDao Bean에는 의존 오브젝트가 존재한다(수정자 메소드로 의존 오브젝트를 넣어주는 부분)
		의존 오브젝트도 하나의 빈이므로 이름이 있을 것이고, 그 이름에 해당하는 메소드를 호출해서 의존 오브젝트를 가져온다. 
		이것은 property 속성으로 넣어주는데, 
		name = 메소드 이름에서 set을 제외한 나머지 부분 사용
		ref = 수정자 메소드를 통해 주입해줄 오브젝트의 빈 이름
		
		응용해서 같은 인터페이스 타입의 빈을 여러 개 정의한 경우엔
		<bean id="NconnectionMaker" class="springbook.user.dao.NConnectionMaker"/>
		이렇게 추가해주고, userDao 프로퍼티의 ref에 NconnectionMaker 이걸 써주면 된다. 그럼 원하는 DB 바꿔 쓸 수 있으니까.
	 -->
	<bean id="userDao" class="springbook.user.dao.UserDaoJdbc">
		<!-- <property name="connectionMaker" ref="connectionMaker"></property> -->
		
		<!-- dataSource로 변경 -->
		<property name="dataSource" ref="dataSource"></property>
		
		<!--  jdbcContext -->
		<!-- <property name="jdbcContext" ref="jdbcContext"></property> -->
		
		<!-- SQL 문 넣기 -->
		<!-- <property name="sqlAdd" value="insert into users(id, name, password, level, login, recommend, email) values(?,?,?,?,?,?,?)"/> -->
		
		<!-- sqlService 추가! -->
		<property name="sqlService" ref="sqlService"/>
		
	</bean>		
	
	<bean id="sqlService" class="springbook.user.sqlservice.XmlSqlService">
	</bean>
	
	<!-- <bean id="jdbcContext" class="springbook.user.dao.JdbcContext">
		dataSource 추가
		<property name="dataSource" ref="dataSource"></property>
	</bean> -->
	
	<!-- 서비스 클래스 빈 설정 ++ 클라이언트(여기에선 userServiceTest)가 userServiceTx를 호출해서 사용하도록 만들어야 한다.-->
	<!-- 데코레이터 -->
	<!-- <bean id="userService" class="springbook.user.service.UserServiceTx"> -->
		<!-- 트랜잭션 매니저 빈 등록 -->
		<!-- <property name="transactionManager" ref="transactionManager"/>
		<property name="userService" ref="userServiceImpl"/>
	</bean> -->
	
	<!-- 타깃 -->
	<!-- <bean id="userServiceImpl" class="springbook.user.service.UserServiceImpl">
		<property name="userDao" ref="userDao"/>
		메일 발송
		<property name="mailSender" ref="mailSender"/>
	</bean> -->
	
	<!-- 팩토리빈에서 userService 가져오게 한다. 데코레이터 주석 처리 -->
	<!-- <bean id="userService" class="springbook.user.service.TxProxyFactoryBean">
		<property name="target" ref="userServiceImpl"/>
		<property name="transactionManager" ref="transactionManager"/>
		<property name="pattern" value="upgradeLevels"/>
		<property name="serviceInterface" value="springbook.user.service.UserService"/>
	</bean> -->
	
	<!-- 스프링 프록시 팩토리 빈 적용 -->
	<!-- <bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="userServiceImpl"/>
		어드바이스와 어드바이저를 동시에 설정해줄 수 있는 프로퍼티. 리스트에 어드바이스나 어드바이저의 빈 아이디를 값으로 넣어주면 된다.
		기존의 ref 애트리뷰트를 사용하는 DI와는 방식이 다름에 주의해야 한다.
		<property name="interceptorNames">
			<list>
				<value>transactionAdvisor</value>한개 이상의 <value> 태그를 넣을 수 있다.
			</list>
		</property>
	</bean> -->
	
	<!-- 프록시 팩토리 빈을 제거한 후 빈 설정 -->
	<!-- DefaultAdvisorAutoProxyCreator 자동 프록시 생성기 등록 
	(등록된 빈 중에서 Advisor 인터페이스를 구현한 것을 모두 찾음)
	-> 생성되는 모든 빈에 대해 어드바이저의 포인트컷을 적용해보면서 프록시 적용 대상 선정
	-> 빈 클래스가 프록시 선정 대상이면 프록시를 만들어 원래 빈 오브젝트와 바꿔치기!
	  -->
	<bean id="userService" class="springbook.user.service.UserServiceImpl">
		<property name="userDao" ref="userDao"/>
		<!-- 메일 발송 -->
		<property name="mailSender" ref="mailSender"/>
	</bean>
	
	<!-- 자동 프록시 생성기 테스트용 userService 등록 -->
	<!-- parent 애트리뷰트 는 프로퍼티 정의를 포함해서 userService 빈의 설정을 상속받는다는 의미! -->
	<bean id="testUserService" class="springbook.user.service.UserServiceTest$TestUserService" parent="userService"/><!-- 스태틱 맴버 클래스는 $로 지정한다. -->
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> -->
	<bean id="mailSender" class="springbook.user.service.DummyMailSender"><!-- 메일 전송할 필요 없다. 전송되는지만 확인 -->
		<property name="host" value="mail.server.com"/>
	</bean>
	
	<!-- 업그레이드 정책 인터페이스 빈 설정 -->
	<bean id="userLevelUpgradePolicy" class="springbook.user.service.UserLevelUpgradePolicySpecial">
		<property name="userDao" ref="userDao"/>
	</bean>
	
	
	
	
	
	<!-- 트랜잭션 어드바이스 빈 설정 -->
	<!-- <bean id="transactionAdvice" class="springbook.user.service.TransactionAdvice">
		<property name="transactionManager" ref="transactionManager"/>
	</bean> -->
	
	<!-- 트랜잭션 어드바이스 -> 스프링이 제공하는 트랜잭션 인터셉터로 업그레이드! -->
	<!-- <bean id="transactionAdvice" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager"/>
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED, readOnly, timeout_30</prop>
				<prop key="upgrade*">PROPAGATION_REQUIRES_NEW, ISOLATION_SERIALIZABLE</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean> -->
	
	<!-- tx 네임스페이스 이용 -->
	<!-- 
		트랜잭션 포인트컷 표현식은 타입 패턴이나(클래스보다는 인터페이스 타입을 기준으로 타입 패턴을 적용하는 것이 좋다!)
		 빈 이름을 이용(execution() 대신 bean(*Service) 이런 식으로... 빈의 아이디 기준으로 적용됨)
		
		일반 서비스 로직 / 배치 로직에 트랜잭션 설정을 다르게 하려면 tx:advice 를 두개 등록하고, aop:config에 aop:advisor 또한 두개로 분리하면 오케이.
	 -->
	 
	<!-- @Transactional 애노테이션 사용하기 위해 추가 -->
	<tx:annotation-driven/>
	
	<!-- <tx:advice id="transactionAdvice"> transaction-manager="transactionManager" 면 생략 가능
		<tx:attributes>
			<tx:method name="get*" read-only="true" timeout="30"/>
			<tx:method name="*" /> propagation="REQUIRED" 면 생략 가능
		</tx:attributes>
	</tx:advice> -->
	
	<!-- 포인트 컷 빈 설정 -->
	<!-- <bean id="transactionPointcut" class="org.springframework.aop.support.NameMatchMethodPointcut">
		<property name="mappedName" value="upgrade*"/>
	</bean> -->
	
	<!-- 클래스 필터 지원 포인트컷을 빈으로 등록! -->
	<!-- <bean id="transactionPointcut" class="springbook.user.service.NameMatchClassMethodPointcut">
		<property name="mappedClassName" value="*ServiceImpl"/>
		<property name="mappedName" value="upgrade*"/>
	</bean> -->
	
	<!-- aspectj 포인트컷 적용 -->
	<!-- <bean id="transactionPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">
		<property name="expression" value="execution(* *..*ServiceImpl.*(..))"/>
	</bean> -->
	
	<!-- 어드바이저 빈 설정 -->
	<!-- <bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="transactionAdvice"/>
		<property name="pointcut" ref="transactionPointcut"/>
	</bean> -->
	
	<!-- aop 네임스페이스 적용 -->
	<!-- <aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* *..*ServiceImpl.upgrade*(..))"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)"/>
	</aop:config> -->
	
	
	<!-- 자동 프록시 생성기 등록 -->
	<!-- tx:advice 와 aop 사용하면 이것들이 해준다. 그러면 안 써도 됨. -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/> -->
	
</beans>